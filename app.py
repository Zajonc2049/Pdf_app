import os
import logging
import tempfile
import asyncio
from pathlib import Path

from flask import Flask, request, jsonify
import telegram
from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from telegram.error import Conflict

from PIL import Image
import pytesseract
from fpdf import FPDF
from transliterate import translit

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Flask –¥–æ–¥–∞—Ç–æ–∫
app = Flask(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # https://your-app.onrender.com/webhook
PORT = int(os.environ.get("PORT", 5000))

if not BOT_TOKEN:
    logger.error("–ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    raise ValueError("BOT_TOKEN is required")

# –®–ª—è—Ö –¥–æ —à—Ä–∏—Ñ—Ç—É (—Å—Ç–≤–æ—Ä–∏–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –≤ –ø—Ä–æ—î–∫—Ç—ñ)
FONT_PATH = "/app/fonts/DejaVuSans.ttf"
if not os.path.exists(FONT_PATH):
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —à–ª—è—Ö –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏
    FONT_PATH = "./fonts/DejaVuSans.ttf"

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è Telegram Application
telegram_app = None

def safe_text_for_pdf(text):
    """–ë–µ–∑–ø–µ—á–Ω–æ –æ–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç –¥–ª—è PDF, –Ω–∞–º–∞–≥–∞—é—á–∏—Å—å –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–∏—Ä–∏–ª–∏—Ü—é."""
    try:
        text.encode('latin-1') 
        return text
    except UnicodeEncodeError:
        try:
            return translit(text, 'uk', reversed=True)
        except Exception as e:
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—ó: {e}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è ASCII –∑ —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è–º.")
            return text.encode('ascii', 'ignore').decode('ascii')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    await update.message.reply_text("üëã –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —Å–∫–∞–Ω –∞–±–æ —Ç–µ–∫—Å—Ç, —ñ —è –∑–≥–µ–Ω–µ—Ä—É—é PDF!")

async def process_image_to_pdf(img_path: str, original_update: Update):
    """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF."""
    try:
        img = Image.open(img_path)
        text = pytesseract.image_to_string(img, lang="ukr+eng")
        
        if not text.strip():
            await original_update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ.")
            return None

        pdf = FPDF()
        pdf.add_page()
        
        font_loaded_successfully = False
        if os.path.exists(FONT_PATH):
            try:
                pdf.add_font("DejaVu", "", FONT_PATH, uni=True)
                pdf.set_font("DejaVu", size=12)
                font_loaded_successfully = True
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —à—Ä–∏—Ñ—Ç DejaVu: {e}")
        
        if not font_loaded_successfully:
            processed_text = safe_text_for_pdf(text)
            pdf.set_font("Arial", size=12)
            pdf.multi_cell(0, 10, processed_text)
        else:
            pdf.multi_cell(0, 10, text)
            
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_pdf_file:
            pdf_output_path = temp_pdf_file.name
            pdf.output(pdf_output_path)
        
        return pdf_output_path

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è PDF: {e}")
        await original_update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF.")
        return None
    finally:
        if os.path.exists(img_path):
            try:
                os.remove(img_path)
            except Exception as e_remove:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {img_path}: {e_remove}")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π"""
    if not update.message or not update.message.photo:
        return

    processing_msg = await update.message.reply_text("üì∑ –û–±—Ä–æ–±–ª—è—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
    img_download_path = None
    pdf_path = None
    
    try:
        photo_file = await update.message.photo[-1].get_file()
        
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_img_file:
            img_download_path = temp_img_file.name
            await photo_file.download_to_drive(img_download_path)

        pdf_path = await process_image_to_pdf(img_download_path, update)

        if pdf_path:
            try:
                with open(pdf_path, "rb") as f:
                    await update.message.reply_document(
                        InputFile(f, filename="scan_to_pdf.pdf"),
                        caption="üìÑ PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É"
                    )
            finally:
                if os.path.exists(pdf_path):
                    os.remove(pdf_path)
        
        await processing_msg.delete()

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ: {e}")
        if 'processing_msg' in locals() and processing_msg:
            await processing_msg.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    finally:
        if img_download_path and os.path.exists(img_download_path):
            os.remove(img_download_path)
        if pdf_path and os.path.exists(pdf_path):
            os.remove(pdf_path)

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (–∑–æ–±—Ä–∞–∂–µ–Ω—å, –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö —è–∫ —Ñ–∞–π–ª–∏)"""
    if not update.message or not update.message.document:
        return

    doc = update.message.document
    img_download_path = None
    pdf_path = None

    if doc.mime_type and doc.mime_type.startswith("image/"):
        processing_msg = await update.message.reply_text(f"üñºÔ∏è –û–±—Ä–æ–±–ª—è—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π —Ñ–∞–π–ª ({doc.file_name or '—Ñ–∞–π–ª'})...")
        try:
            doc_file = await doc.get_file()
            
            file_extension = os.path.splitext(doc.file_name)[1] if doc.file_name else '.jpg'
            if not file_extension.startswith('.'):
                file_extension = '.' + (file_extension if file_extension else 'dat')

            with tempfile.NamedTemporaryFile(suffix=file_extension, delete=False) as temp_doc_file:
                img_download_path = temp_doc_file.name
                await doc_file.download_to_drive(img_download_path)

            pdf_path = await process_image_to_pdf(img_download_path, update)

            if pdf_path:
                try:
                    with open(pdf_path, "rb") as f:
                        output_filename = "ocr_document.pdf"
                        if doc.file_name:
                            base_name = os.path.splitext(doc.file_name)[0]
                            output_filename = f"{base_name}_ocr.pdf"
                        
                        await update.message.reply_document(
                            InputFile(f, filename=output_filename),
                            caption="üìÑ PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                        )
                finally:
                    if os.path.exists(pdf_path):
                        os.remove(pdf_path)
            
            await processing_msg.delete()

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            if 'processing_msg' in locals() and processing_msg:
                await processing_msg.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        finally:
            if img_download_path and os.path.exists(img_download_path):
                os.remove(img_download_path)
            if pdf_path and os.path.exists(pdf_path):
                os.remove(pdf_path)
    else:
        await update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—è–∫ —Ñ–æ—Ç–æ –∞–±–æ —Ñ–∞–π–ª) –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ PDF.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF"""
    if not update.message or not update.message.text:
        return
        
    text_content = update.message.text.strip()
    
    if not text_content:
        await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF.")
        return
        
    processing_msg = await update.message.reply_text("üìù –°—Ç–≤–æ—Ä—é—é PDF –∑ —Ç–µ–∫—Å—Ç—É...")
    pdf_output_path = None
    
    try:
        pdf = FPDF()
        pdf.add_page()
        
        font_loaded_successfully = False
        if os.path.exists(FONT_PATH):
            try:
                pdf.add_font("DejaVu", "", FONT_PATH, uni=True)
                pdf.set_font("DejaVu", size=12)
                font_loaded_successfully = True
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —à—Ä–∏—Ñ—Ç DejaVu –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ PDF: {e}")

        if not font_loaded_successfully:
            processed_text = safe_text_for_pdf(text_content)
            pdf.set_font("Arial", size=12)
            pdf.multi_cell(0, 10, processed_text)
        else:
            pdf.multi_cell(0, 10, text_content)
            
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_pdf_file:
            pdf_output_path = temp_pdf_file.name
            pdf.output(pdf_output_path)
            
        try:
            with open(pdf_output_path, "rb") as f:
                await update.message.reply_document(
                    InputFile(f, filename="text_to_pdf.pdf"),
                    caption="üìÑ PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ –≤–∞—à–æ–≥–æ —Ç–µ–∫—Å—Ç—É"
                )
        finally:
            if os.path.exists(pdf_output_path):
                os.remove(pdf_output_path)
                
        await processing_msg.delete()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF –∑ —Ç–µ–∫—Å—Ç—É: {e}")
        if 'processing_msg' in locals() and processing_msg:
            await processing_msg.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ PDF –∑ —Ç–µ–∫—Å—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ PDF –∑—Ç–µ–∫—Å—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    finally:
        if pdf_output_path and os.path.exists(pdf_output_path):
            os.remove(pdf_output_path)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥—É—î –ø–æ–º–∏–ª–∫–∏, —Å–ø—Ä–∏—á–∏–Ω–µ–Ω—ñ Update."""
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

def setup_telegram_app():
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î Telegram –¥–æ–¥–∞—Ç–æ–∫"""
    global telegram_app
    
    telegram_app = (
        Application.builder()
        .token(BOT_TOKEN)
        .connection_pool_size(10)
        .pool_timeout(30)
        .connect_timeout(30)
        .read_timeout(30)
        .write_timeout(30)
        .build()
    )

    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    telegram_app.add_handler(MessageHandler(filters.Document.IMAGE, handle_document))
    telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    telegram_app.add_error_handler(error_handler)

# Flask routes
@app.route('/')
def health_check():
    """Health check endpoint –¥–ª—è Render"""
    return jsonify({
        "status": "healthy",
        "service": "telegram-pdf-bot",
        "version": "1.0.0"
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    """–í–µ–±—Ö—É–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ Telegram"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ JSON –¥–∞–Ω—ñ –≤—ñ–¥ Telegram
        json_data = request.get_json()
        
        if not json_data:
            logger.warning("–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ —É –≤–µ–±—Ö—É–∫—É")
            return jsonify({"status": "error", "message": "No data received"}), 400
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ Update –æ–±'—î–∫—Ç
        update = Update.de_json(json_data, telegram_app.bot)
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ update –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        asyncio.create_task(telegram_app.process_update(update))
        
        return jsonify({"status": "ok"})
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/set_webhook', methods=['POST'])
def set_webhook():
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –≤–µ–±—Ö—É–∫ (–¥–ª—è —Ä—É—á–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è)"""
    try:
        if not WEBHOOK_URL:
            return jsonify({"status": "error", "message": "WEBHOOK_URL not configured"}), 400
            
        webhook_url = f"{WEBHOOK_URL}/webhook"
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π bot –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
        bot = telegram.Bot(token=BOT_TOKEN)
        result = asyncio.run(bot.set_webhook(webhook_url))
        
        if result:
            logger.info(f"–í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")
            return jsonify({"status": "success", "webhook_url": webhook_url})
        else:
            return jsonify({"status": "error", "message": "Failed to set webhook"}), 500
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/delete_webhook', methods=['POST'])
def delete_webhook():
    """–í–∏–¥–∞–ª—è—î –≤–µ–±—Ö—É–∫"""
    try:
        bot = telegram.Bot(token=BOT_TOKEN)
        result = asyncio.run(bot.delete_webhook())
        
        if result:
            logger.info("–í–µ–±—Ö—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ")
            return jsonify({"status": "success", "message": "Webhook deleted"})
        else:
            return jsonify({"status": "error", "message": "Failed to delete webhook"}), 500
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

def initialize_app():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –¥–æ–¥–∞—Ç–æ–∫"""
    try:
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Telegram –¥–æ–¥–∞—Ç–æ–∫
        setup_telegram_app()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫, —è–∫—â–æ WEBHOOK_URL –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π
        if WEBHOOK_URL:
            try:
                webhook_url = f"{WEBHOOK_URL}/webhook"
                bot = telegram.Bot(token=BOT_TOKEN)
                asyncio.run(bot.set_webhook(webhook_url))
                logger.info(f"–í–µ–±—Ö—É–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–µ–±—Ö—É–∫: {e}")
        
        logger.info("–î–æ–¥–∞—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫—É: {e}")
        raise

if __name__ == '__main__':
    initialize_app()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask –¥–æ–¥–∞—Ç–æ–∫
    app.run(
        host='0.0.0.0',
        port=PORT,
        debug=False  # –£ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –∑–∞–≤–∂–¥–∏ False
    )
